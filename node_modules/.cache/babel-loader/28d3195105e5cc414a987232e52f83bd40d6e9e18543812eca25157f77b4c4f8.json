{"ast":null,"code":"import React,{useState,useEffect}from'react';import MovieForm from'./MovieForm';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const MovieCrud=()=>{const[movies,setMovies]=useState([]);const[formData,setFormData]=useState({title:'',genre:'',year_released:'',sinopsis:'',director:'',casting:'',rating:'',cover_img:''});const[loading,setLoading]=useState(true);const[editing,setEditing]=useState(false);const[editingMovie,setEditingMovie]=useState(null);useEffect(()=>{const fetchMovies=async()=>{try{const response=await fetch('https://cinepedia-dsrv.onrender.com/api/movies');if(response.ok){const data=await response.json();console.log('Fetched movies:',data);if(Array.isArray(data.results)){setMovies(data.results);}else{console.error('Invalid data format. Expected an array.');setMovies([]);}}else{console.error('Failed to fetch movies');}}catch(error){console.error('Error:',error);}finally{setLoading(false);}};fetchMovies();},[]);const handleChange=e=>{const{name,value}=e.target;setFormData({...formData,[name]:value});};const handleCreate=async()=>{try{const response=await fetch('https://cinepedia-dsrv.onrender.com/api/movies',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(formData)});if(response.ok){console.log('Movie created successfully');const updatedMoviesResponse=await fetch('https://cinepedia-dsrv.onrender.com/api/movies');if(updatedMoviesResponse.ok){const updatedMoviesData=await updatedMoviesResponse.json();setMovies(updatedMoviesData.results||[]);}else{console.error('Failed to fetch updated movies after creation');}setFormData({title:'',genre:'',year_released:'',sinopsis:'',director:'',casting:'',rating:'',cover_img:''});}else{console.error('Failed to create movie');}}catch(error){console.error('Error:',error);}};const handleEdit=movie=>{setEditing(true);setEditingMovie(movie);setFormData({title:movie.title,genre:movie.genre,year_released:movie.year_released,sinopsis:movie.sinopsis,director:movie.director,casting:movie.casting,rating:movie.rating,cover_img:movie.cover_img});};const handleUpdate=async id=>{try{const response=await fetch(\"https://cinepedia-dsrv.onrender.com/api/movies/\".concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(formData)});if(response.ok){console.log('Movie updated successfully');const updatedMoviesResponse=await fetch('https://cinepedia-dsrv.onrender.com/api/movies');if(updatedMoviesResponse.ok){const updatedMoviesData=await updatedMoviesResponse.json();setMovies(updatedMoviesData.results||[]);}else{console.error('Failed to fetch updated movies after editing');}setEditing(false);setEditingMovie(null);setFormData({title:'',genre:'',year_released:'',sinopsis:'',director:'',casting:'',rating:'',cover_img:''});}else{console.error('Failed to update movie');}}catch(error){console.error('Error:',error);}};const handleDelete=async id=>{try{const response=await fetch(\"https://cinepedia-dsrv.onrender.com/api/movies/\".concat(id),{method:'DELETE'});if(response.ok){console.log('Movie deleted successfully');const updatedMoviesResponse=await fetch('https://cinepedia-dsrv.onrender.com/api/movies');if(updatedMoviesResponse.ok){const updatedMoviesData=await updatedMoviesResponse.json();setMovies(updatedMoviesData.results||[]);}else{console.error('Failed to fetch updated movies after deletion');}}else{console.error('Failed to delete movie');}}catch(error){console.error('Error:',error);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Movie List\"}),/*#__PURE__*/_jsx(MovieForm,{formData:formData,handleChange:handleChange,handleSubmit:editing?()=>handleUpdate(editingMovie.movie_id):handleCreate,buttonText:editing?'Update Movie':'Create Movie'}),loading?/*#__PURE__*/_jsx(\"p\",{children:\"Loading movies...\"}):/*#__PURE__*/_jsx(\"ul\",{children:movies.map(movie=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"span\",{children:movie.title}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleEdit(movie),children:\"Edit\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDelete(movie.movie_id),children:\"Delete\"})]},movie.movie_id))})]});};export default MovieCrud;","map":{"version":3,"names":["React","useState","useEffect","MovieForm","jsx","_jsx","jsxs","_jsxs","MovieCrud","movies","setMovies","formData","setFormData","title","genre","year_released","sinopsis","director","casting","rating","cover_img","loading","setLoading","editing","setEditing","editingMovie","setEditingMovie","fetchMovies","response","fetch","ok","data","json","console","log","Array","isArray","results","error","handleChange","e","name","value","target","handleCreate","method","headers","body","JSON","stringify","updatedMoviesResponse","updatedMoviesData","handleEdit","movie","handleUpdate","id","concat","handleDelete","children","handleSubmit","movie_id","buttonText","map","onClick"],"sources":["/Users/David/Documents/GitHub/Cinepedia-FrontEnd/src/components/MovieCrud.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MovieForm from './MovieForm';\n\nconst MovieCrud = () => {\n  const [movies, setMovies] = useState([]);\n  const [formData, setFormData] = useState({\n    title: '',\n    genre: '',\n    year_released: '',\n    sinopsis: '',\n    director: '',\n    casting: '',\n    rating: '',\n    cover_img: '',\n  });\n\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [editingMovie, setEditingMovie] = useState(null);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('https://cinepedia-dsrv.onrender.com/api/movies');\n        if (response.ok) {\n          const data = await response.json();\n          console.log('Fetched movies:', data);\n\n          if (Array.isArray(data.results)) {\n            setMovies(data.results);\n          } else {\n            console.error('Invalid data format. Expected an array.');\n            setMovies([]);\n          }\n        } else {\n          console.error('Failed to fetch movies');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, []);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleCreate = async () => {\n    try {\n      const response = await fetch('https://cinepedia-dsrv.onrender.com/api/movies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        console.log('Movie created successfully');\n        const updatedMoviesResponse = await fetch('https://cinepedia-dsrv.onrender.com/api/movies');\n        if (updatedMoviesResponse.ok) {\n          const updatedMoviesData = await updatedMoviesResponse.json();\n          setMovies(updatedMoviesData.results || []);\n        } else {\n          console.error('Failed to fetch updated movies after creation');\n        }\n        setFormData({\n          title: '',\n          genre: '',\n          year_released: '',\n          sinopsis: '',\n          director: '',\n          casting: '',\n          rating: '',\n          cover_img: '',\n        });\n      } else {\n        console.error('Failed to create movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleEdit = (movie) => {\n    setEditing(true);\n    setEditingMovie(movie);\n    setFormData({\n      title: movie.title,\n      genre: movie.genre,\n      year_released: movie.year_released,\n      sinopsis: movie.sinopsis,\n      director: movie.director,\n      casting: movie.casting,\n      rating: movie.rating,\n      cover_img: movie.cover_img,\n    });\n  };\n\n  const handleUpdate = async (id) => {\n    try {\n      const response = await fetch(`https://cinepedia-dsrv.onrender.com/api/movies/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        console.log('Movie updated successfully');\n        const updatedMoviesResponse = await fetch('https://cinepedia-dsrv.onrender.com/api/movies');\n        if (updatedMoviesResponse.ok) {\n          const updatedMoviesData = await updatedMoviesResponse.json();\n          setMovies(updatedMoviesData.results || []);\n        } else {\n          console.error('Failed to fetch updated movies after editing');\n        }\n        setEditing(false);\n        setEditingMovie(null);\n        setFormData({\n          title: '',\n          genre: '',\n          year_released: '',\n          sinopsis: '',\n          director: '',\n          casting: '',\n          rating: '',\n          cover_img: '',\n        });\n      } else {\n        console.error('Failed to update movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`https://cinepedia-dsrv.onrender.com/api/movies/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        console.log('Movie deleted successfully');\n        const updatedMoviesResponse = await fetch('https://cinepedia-dsrv.onrender.com/api/movies');\n        if (updatedMoviesResponse.ok) {\n          const updatedMoviesData = await updatedMoviesResponse.json();\n          setMovies(updatedMoviesData.results || []);\n        } else {\n          console.error('Failed to fetch updated movies after deletion');\n        }\n      } else {\n        console.error('Failed to delete movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Movie List</h2>\n      <MovieForm\n        formData={formData}\n        handleChange={handleChange}\n        handleSubmit={editing ? () => handleUpdate(editingMovie.movie_id) : handleCreate}\n        buttonText={editing ? 'Update Movie' : 'Create Movie'}\n      />\n      {loading ? (\n        <p>Loading movies...</p>\n      ) : (\n        <ul>\n          {movies.map((movie) => (\n            <li key={movie.movie_id}>\n              <span>{movie.title}</span>\n              <button onClick={() => handleEdit(movie)}>Edit</button>\n              <button onClick={() => handleDelete(movie.movie_id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default MovieCrud;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,SAAS,KAAM,aAAa,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEpC,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACtB,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACU,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,CACvCY,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EAAE,CACTC,aAAa,CAAE,EAAE,CACjBC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,EAAE,CACZC,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,EAAE,CACVC,SAAS,CAAE,EACb,CAAC,CAAC,CAEF,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGrB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACsB,OAAO,CAAEC,UAAU,CAAC,CAAGvB,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACwB,YAAY,CAAEC,eAAe,CAAC,CAAGzB,QAAQ,CAAC,IAAI,CAAC,CAEtDC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAyB,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,gDAAgD,CAAC,CAC9E,GAAID,QAAQ,CAACE,EAAE,CAAE,CACf,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAClCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEH,IAAI,CAAC,CAEpC,GAAII,KAAK,CAACC,OAAO,CAACL,IAAI,CAACM,OAAO,CAAC,CAAE,CAC/B3B,SAAS,CAACqB,IAAI,CAACM,OAAO,CAAC,CACzB,CAAC,IAAM,CACLJ,OAAO,CAACK,KAAK,CAAC,yCAAyC,CAAC,CACxD5B,SAAS,CAAC,EAAE,CAAC,CACf,CACF,CAAC,IAAM,CACLuB,OAAO,CAACK,KAAK,CAAC,wBAAwB,CAAC,CACzC,CACF,CAAE,MAAOA,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAChC,CAAC,OAAS,CACRhB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDK,WAAW,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAY,YAAY,CAAIC,CAAC,EAAK,CAC1B,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAGF,CAAC,CAACG,MAAM,CAChC/B,WAAW,CAAC,CAAE,GAAGD,QAAQ,CAAE,CAAC8B,IAAI,EAAGC,KAAM,CAAC,CAAC,CAC7C,CAAC,CAED,KAAM,CAAAE,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,gDAAgD,CAAE,CAC7EgB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACtC,QAAQ,CAC/B,CAAC,CAAC,CAEF,GAAIiB,QAAQ,CAACE,EAAE,CAAE,CACfG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC,KAAM,CAAAgB,qBAAqB,CAAG,KAAM,CAAArB,KAAK,CAAC,gDAAgD,CAAC,CAC3F,GAAIqB,qBAAqB,CAACpB,EAAE,CAAE,CAC5B,KAAM,CAAAqB,iBAAiB,CAAG,KAAM,CAAAD,qBAAqB,CAAClB,IAAI,CAAC,CAAC,CAC5DtB,SAAS,CAACyC,iBAAiB,CAACd,OAAO,EAAI,EAAE,CAAC,CAC5C,CAAC,IAAM,CACLJ,OAAO,CAACK,KAAK,CAAC,+CAA+C,CAAC,CAChE,CACA1B,WAAW,CAAC,CACVC,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EAAE,CACTC,aAAa,CAAE,EAAE,CACjBC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,EAAE,CACZC,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,EAAE,CACVC,SAAS,CAAE,EACb,CAAC,CAAC,CACJ,CAAC,IAAM,CACLa,OAAO,CAACK,KAAK,CAAC,wBAAwB,CAAC,CACzC,CACF,CAAE,MAAOA,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAChC,CACF,CAAC,CAED,KAAM,CAAAc,UAAU,CAAIC,KAAK,EAAK,CAC5B7B,UAAU,CAAC,IAAI,CAAC,CAChBE,eAAe,CAAC2B,KAAK,CAAC,CACtBzC,WAAW,CAAC,CACVC,KAAK,CAAEwC,KAAK,CAACxC,KAAK,CAClBC,KAAK,CAAEuC,KAAK,CAACvC,KAAK,CAClBC,aAAa,CAAEsC,KAAK,CAACtC,aAAa,CAClCC,QAAQ,CAAEqC,KAAK,CAACrC,QAAQ,CACxBC,QAAQ,CAAEoC,KAAK,CAACpC,QAAQ,CACxBC,OAAO,CAAEmC,KAAK,CAACnC,OAAO,CACtBC,MAAM,CAAEkC,KAAK,CAAClC,MAAM,CACpBC,SAAS,CAAEiC,KAAK,CAACjC,SACnB,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAkC,YAAY,CAAG,KAAO,CAAAC,EAAE,EAAK,CACjC,GAAI,CACF,KAAM,CAAA3B,QAAQ,CAAG,KAAM,CAAAC,KAAK,mDAAA2B,MAAA,CAAmDD,EAAE,EAAI,CACnFV,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACtC,QAAQ,CAC/B,CAAC,CAAC,CAEF,GAAIiB,QAAQ,CAACE,EAAE,CAAE,CACfG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC,KAAM,CAAAgB,qBAAqB,CAAG,KAAM,CAAArB,KAAK,CAAC,gDAAgD,CAAC,CAC3F,GAAIqB,qBAAqB,CAACpB,EAAE,CAAE,CAC5B,KAAM,CAAAqB,iBAAiB,CAAG,KAAM,CAAAD,qBAAqB,CAAClB,IAAI,CAAC,CAAC,CAC5DtB,SAAS,CAACyC,iBAAiB,CAACd,OAAO,EAAI,EAAE,CAAC,CAC5C,CAAC,IAAM,CACLJ,OAAO,CAACK,KAAK,CAAC,8CAA8C,CAAC,CAC/D,CACAd,UAAU,CAAC,KAAK,CAAC,CACjBE,eAAe,CAAC,IAAI,CAAC,CACrBd,WAAW,CAAC,CACVC,KAAK,CAAE,EAAE,CACTC,KAAK,CAAE,EAAE,CACTC,aAAa,CAAE,EAAE,CACjBC,QAAQ,CAAE,EAAE,CACZC,QAAQ,CAAE,EAAE,CACZC,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,EAAE,CACVC,SAAS,CAAE,EACb,CAAC,CAAC,CACJ,CAAC,IAAM,CACLa,OAAO,CAACK,KAAK,CAAC,wBAAwB,CAAC,CACzC,CACF,CAAE,MAAOA,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAChC,CACF,CAAC,CAED,KAAM,CAAAmB,YAAY,CAAG,KAAO,CAAAF,EAAE,EAAK,CACjC,GAAI,CACF,KAAM,CAAA3B,QAAQ,CAAG,KAAM,CAAAC,KAAK,mDAAA2B,MAAA,CAAmDD,EAAE,EAAI,CACnFV,MAAM,CAAE,QACV,CAAC,CAAC,CAEF,GAAIjB,QAAQ,CAACE,EAAE,CAAE,CACfG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC,KAAM,CAAAgB,qBAAqB,CAAG,KAAM,CAAArB,KAAK,CAAC,gDAAgD,CAAC,CAC3F,GAAIqB,qBAAqB,CAACpB,EAAE,CAAE,CAC5B,KAAM,CAAAqB,iBAAiB,CAAG,KAAM,CAAAD,qBAAqB,CAAClB,IAAI,CAAC,CAAC,CAC5DtB,SAAS,CAACyC,iBAAiB,CAACd,OAAO,EAAI,EAAE,CAAC,CAC5C,CAAC,IAAM,CACLJ,OAAO,CAACK,KAAK,CAAC,+CAA+C,CAAC,CAChE,CACF,CAAC,IAAM,CACLL,OAAO,CAACK,KAAK,CAAC,wBAAwB,CAAC,CACzC,CACF,CAAE,MAAOA,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAChC,CACF,CAAC,CAED,mBACE/B,KAAA,QAAAmD,QAAA,eACErD,IAAA,OAAAqD,QAAA,CAAI,YAAU,CAAI,CAAC,cACnBrD,IAAA,CAACF,SAAS,EACRQ,QAAQ,CAAEA,QAAS,CACnB4B,YAAY,CAAEA,YAAa,CAC3BoB,YAAY,CAAEpC,OAAO,CAAG,IAAM+B,YAAY,CAAC7B,YAAY,CAACmC,QAAQ,CAAC,CAAGhB,YAAa,CACjFiB,UAAU,CAAEtC,OAAO,CAAG,cAAc,CAAG,cAAe,CACvD,CAAC,CACDF,OAAO,cACNhB,IAAA,MAAAqD,QAAA,CAAG,mBAAiB,CAAG,CAAC,cAExBrD,IAAA,OAAAqD,QAAA,CACGjD,MAAM,CAACqD,GAAG,CAAET,KAAK,eAChB9C,KAAA,OAAAmD,QAAA,eACErD,IAAA,SAAAqD,QAAA,CAAOL,KAAK,CAACxC,KAAK,CAAO,CAAC,cAC1BR,IAAA,WAAQ0D,OAAO,CAAEA,CAAA,GAAMX,UAAU,CAACC,KAAK,CAAE,CAAAK,QAAA,CAAC,MAAI,CAAQ,CAAC,cACvDrD,IAAA,WAAQ0D,OAAO,CAAEA,CAAA,GAAMN,YAAY,CAACJ,KAAK,CAACO,QAAQ,CAAE,CAAAF,QAAA,CAAC,QAAM,CAAQ,CAAC,GAH7DL,KAAK,CAACO,QAIX,CACL,CAAC,CACA,CACL,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAApD,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}