{"ast":null,"code":"var _jsxFileName = \"/Users/David/Documents/Projects/Cinepedia/frontend/src/components/MovieTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieTable = () => {\n  _s();\n  const [movieData, setMovieData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:2090/api/movies'); // Replace 'YOUR_API_ENDPOINT' with the actual API endpoint\n        const data = await response.json();\n        setMovieData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array ensures the effect runs only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xs rounded overflow-hidden shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"w-full\",\n      src: \"https://placekitten.com/400/300\",\n      alt: \"Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-6 py-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"font-bold text-xl mb-2\",\n        children: \"Card Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-700 text-base\",\n        children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-6 py-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\",\n        children: \"#Tag1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\",\n        children: \"#Tag2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700\",\n        children: \"#Tag3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this)\n\n  /*<div>\n    <h1>Movies Information</h1>\n    {movieData ? (\n      <table>\n        <thead>\n          <tr>\n            <th>movie_id</th>\n            <th>title</th>\n            <th>genre</th>\n            <th>year_released</th>\n            <th>sinopsis</th>\n            <th>director</th>\n            <th>casting</th>\n            <th>rating</th>\n            <th>cover_img</th>\n            <th>created_at</th>\n          </tr>\n        </thead>\n        <tbody>\n          {movieData.results.map((movie) => (\n            <tr key={movie.movie_id}>\n              <td>{movie.movie_id}</td>\n              <td>{movie.title}</td>\n              <td>{movie.genre}</td>\n              <td>{movie.year_released}</td>\n              <td>{movie.sinopsis}</td>\n              <td>{movie.director}</td>\n              <td>{movie.casting}</td>\n              <td>{movie.rating}</td>\n              <td>\n                <img src={movie.cover_img} alt={movie.title} style={{ maxWidth: '100px', maxHeight: '100px' }} />\n              </td>\n              <td>{movie.created_at}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    ) : (\n      <p>Loading...</p>\n    )}\n  </div> */;\n};\n_s(MovieTable, \"SjeSPeghCDdQMeIk8t2GMKAbI64=\");\n_c = MovieTable;\nexport default MovieTable;\nvar _c;\n$RefreshReg$(_c, \"MovieTable\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MovieTable","_s","movieData","setMovieData","fetchData","response","fetch","data","json","error","console","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/David/Documents/Projects/Cinepedia/frontend/src/components/MovieTable.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst MovieTable = () => {\n  const [movieData, setMovieData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:2090/api/movies'); // Replace 'YOUR_API_ENDPOINT' with the actual API endpoint\n        const data = await response.json();\n        setMovieData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array ensures the effect runs only once on component mount\n\n  return (\n\n    <div className=\"max-w-xs rounded overflow-hidden shadow-lg\">\n      <img className=\"w-full\" src=\"https://placekitten.com/400/300\" alt=\"Card\" />\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-xl mb-2\">Card Title</div>\n        <p className=\"text-gray-700 text-base\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        </p>\n      </div>\n      <div className=\"px-6 py-4\">\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">#Tag1</span>\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">#Tag2</span>\n        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700\">#Tag3</span>\n      </div>\n    </div>\n\n    /*<div>\n      <h1>Movies Information</h1>\n      {movieData ? (\n        <table>\n          <thead>\n            <tr>\n              <th>movie_id</th>\n              <th>title</th>\n              <th>genre</th>\n              <th>year_released</th>\n              <th>sinopsis</th>\n              <th>director</th>\n              <th>casting</th>\n              <th>rating</th>\n              <th>cover_img</th>\n              <th>created_at</th>\n            </tr>\n          </thead>\n          <tbody>\n            {movieData.results.map((movie) => (\n              <tr key={movie.movie_id}>\n                <td>{movie.movie_id}</td>\n                <td>{movie.title}</td>\n                <td>{movie.genre}</td>\n                <td>{movie.year_released}</td>\n                <td>{movie.sinopsis}</td>\n                <td>{movie.director}</td>\n                <td>{movie.casting}</td>\n                <td>{movie.rating}</td>\n                <td>\n                  <img src={movie.cover_img} alt={movie.title} style={{ maxWidth: '100px', maxHeight: '100px' }} />\n                </td>\n                <td>{movie.created_at}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div> */\n  );\n};\n\nexport default MovieTable;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;QAClE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,YAAY,CAACI,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBAEEL,OAAA;IAAKY,SAAS,EAAC,4CAA4C;IAAAC,QAAA,gBACzDb,OAAA;MAAKY,SAAS,EAAC,QAAQ;MAACE,GAAG,EAAC,iCAAiC;MAACC,GAAG,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3EnB,OAAA;MAAKY,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBb,OAAA;QAAKY,SAAS,EAAC,wBAAwB;QAAAC,QAAA,EAAC;MAAU;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxDnB,OAAA;QAAGY,SAAS,EAAC,yBAAyB;QAAAC,QAAA,EAAC;MAEvC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNnB,OAAA;MAAKY,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBb,OAAA;QAAMY,SAAS,EAAC,0FAA0F;QAAAC,QAAA,EAAC;MAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACvHnB,OAAA;QAAMY,SAAS,EAAC,0FAA0F;QAAAC,QAAA,EAAC;MAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACvHnB,OAAA;QAAMY,SAAS,EAAC,qFAAqF;QAAAC,QAAA,EAAC;MAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/G,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH;;EAEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAxCI;AA0CJ,CAAC;AAACjB,EAAA,CA5EID,UAAU;AAAAmB,EAAA,GAAVnB,UAAU;AA8EhB,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}