{"ast":null,"code":"var _jsxFileName = \"/Users/David/Documents/Projects/Cinepedia/frontend/src/components/MovieCrud.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MovieForm from './MovieForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieCrud = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [formData, setFormData] = useState({\n    title: '',\n    genre: '',\n    year_released: '',\n    sinopsis: '',\n    director: '',\n    casting: '',\n    rating: '',\n    cover_img: ''\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://localhost:2090/api/movies');\n        if (response.ok) {\n          const data = await response.json();\n          console.log('Fetched movies:', data);\n\n          // Ensure data is an array before setting the state\n          if (Array.isArray(data)) {\n            setMovies(data);\n          } else {\n            console.error('Invalid data format. Expected an array.');\n          }\n        } else {\n          console.error('Failed to fetch movies');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, []);\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleCreate = async () => {\n    try {\n      const response = await fetch('http://localhost:2090/api/movies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log('Movie created successfully');\n        const updatedMovies = await (await fetch('http://localhost:2090/api/movies')).json();\n        setMovies(updatedMovies);\n        setFormData({\n          title: '',\n          genre: '',\n          year_released: '',\n          sinopsis: '',\n          director: '',\n          casting: '',\n          rating: '',\n          cover_img: ''\n        });\n      } else {\n        console.error('Failed to create movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`http://localhost:2090/api/movies/${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        console.log('Movie deleted successfully');\n        const updatedMovies = await (await fetch('http://localhost:2090/api/movies')).json();\n        setMovies(updatedMovies);\n      } else {\n        console.error('Failed to delete movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Movie List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieForm, {\n      formData: formData,\n      handleChange: handleChange,\n      handleSubmit: handleCreate,\n      buttonText: \"Create Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(movie.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieCrud, \"j+K5N172Efn32dQHgwav9Kz5pj0=\");\n_c = MovieCrud;\nexport default MovieCrud;\nvar _c;\n$RefreshReg$(_c, \"MovieCrud\");","map":{"version":3,"names":["React","useState","useEffect","MovieForm","jsxDEV","_jsxDEV","MovieCrud","_s","movies","setMovies","formData","setFormData","title","genre","year_released","sinopsis","director","casting","rating","cover_img","loading","setLoading","fetchMovies","response","fetch","ok","data","json","console","log","Array","isArray","error","handleChange","e","name","value","target","handleCreate","method","headers","body","JSON","stringify","updatedMovies","handleDelete","id","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSubmit","buttonText","map","movie","onClick","_c","$RefreshReg$"],"sources":["/Users/David/Documents/Projects/Cinepedia/frontend/src/components/MovieCrud.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MovieForm from './MovieForm';\n\nconst MovieCrud = () => {\n  const [movies, setMovies] = useState([]);\n  const [formData, setFormData] = useState({\n    title: '',\n    genre: '',\n    year_released: '',\n    sinopsis: '',\n    director: '',\n    casting: '',\n    rating: '',\n    cover_img: '',\n  });\n\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://localhost:2090/api/movies');\n        if (response.ok) {\n          const data = await response.json();\n          console.log('Fetched movies:', data);\n  \n          // Ensure data is an array before setting the state\n          if (Array.isArray(data)) {\n            setMovies(data);\n          } else {\n            console.error('Invalid data format. Expected an array.');\n          }\n        } else {\n          console.error('Failed to fetch movies');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchMovies();\n  }, []);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleCreate = async () => {\n    try {\n      const response = await fetch('http://localhost:2090/api/movies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        console.log('Movie created successfully');\n        const updatedMovies = await (await fetch('http://localhost:2090/api/movies')).json();\n        setMovies(updatedMovies);\n        setFormData({\n          title: '',\n          genre: '',\n          year_released: '',\n          sinopsis: '',\n          director: '',\n          casting: '',\n          rating: '',\n          cover_img: '',\n        });\n      } else {\n        console.error('Failed to create movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`http://localhost:2090/api/movies/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        console.log('Movie deleted successfully');\n        const updatedMovies = await (await fetch('http://localhost:2090/api/movies')).json();\n        setMovies(updatedMovies);\n      } else {\n        console.error('Failed to delete movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Movie List</h2>\n      <MovieForm\n        formData={formData}\n        handleChange={handleChange}\n        handleSubmit={handleCreate}\n        buttonText=\"Create Movie\"\n      />\n      {loading ? (\n        <p>Loading movies...</p>\n      ) : (\n        <ul>\n          {movies.map((movie) => (\n            <li key={movie.id}>\n              <span>{movie.title}</span>\n              <button>Edit</button>\n              <button onClick={() => handleDelete(movie.id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default MovieCrud;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}