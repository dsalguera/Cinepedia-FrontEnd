{"ast":null,"code":"var _jsxFileName = \"/Users/David/Documents/Projects/Cinepedia/frontend/src/components/MovieCrud.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieCrud = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [formData, setFormData] = useState({\n    title: '',\n    genre: '',\n    year_released: '',\n    sinopsis: '',\n    director: '',\n    casting: '',\n    rating: '',\n    cover_img: ''\n  });\n  useEffect(() => {\n    // Fetch movies when the component mounts\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://localhost:2090/api/movies'); // Replace 'your-api-endpoint' with the actual API endpoint\n        if (response.ok) {\n          const data = await response.json();\n          setMovies(data);\n        } else {\n          console.error('Failed to fetch movies');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n    fetchMovies();\n  }, []); // Empty dependency array to fetch movies only once\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleCreate = async () => {\n    try {\n      const response = await fetch('your-api-endpoint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log('Movie created successfully');\n        // Refetch movies to update the list\n        const updatedMovies = await (await fetch('your-api-endpoint')).json(); // Replace 'your-api-endpoint'\n        setMovies(updatedMovies);\n      } else {\n        console.error('Failed to create movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleUpdate = async id => {\n    try {\n      const response = await fetch(`your-api-endpoint/${id}`, {\n        // Replace 'your-api-endpoint'\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log('Movie updated successfully');\n        // Refetch movies to update the list\n        const updatedMovies = await (await fetch('your-api-endpoint')).json(); // Replace 'your-api-endpoint'\n        setMovies(updatedMovies);\n      } else {\n        console.error('Failed to update movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  const handleDelete = async id => {\n    try {\n      const response = await fetch(`your-api-endpoint/${id}`, {\n        // Replace 'your-api-endpoint'\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        console.log('Movie deleted successfully');\n        // Refetch movies to update the list\n        const updatedMovies = await (await fetch('your-api-endpoint')).json(); // Replace 'your-api-endpoint'\n        setMovies(updatedMovies);\n      } else {\n        console.error('Failed to delete movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Movie List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading movies...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(movie.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this)]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieCrud, \"VdNAStNlfRlu7OW2AWEtUm4duHc=\");\n_c = MovieCrud;\nexport default MovieCrud;\nvar _c;\n$RefreshReg$(_c, \"MovieCrud\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MovieCrud","_s","movies","setMovies","formData","setFormData","title","genre","year_released","sinopsis","director","casting","rating","cover_img","fetchMovies","response","fetch","ok","data","json","console","error","handleChange","e","name","value","target","handleCreate","method","headers","body","JSON","stringify","log","updatedMovies","handleUpdate","id","handleDelete","children","fileName","_jsxFileName","lineNumber","columnNumber","MovieForm","loading","map","movie","onClick","_c","$RefreshReg$"],"sources":["/Users/David/Documents/Projects/Cinepedia/frontend/src/components/MovieCrud.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst MovieCrud = () => {\n  const [movies, setMovies] = useState([]);\n  const [formData, setFormData] = useState({\n    title: '',\n    genre: '',\n    year_released: '',\n    sinopsis: '',\n    director: '',\n    casting: '',\n    rating: '',\n    cover_img: '',\n  });\n\n  useEffect(() => {\n    // Fetch movies when the component mounts\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://localhost:2090/api/movies'); // Replace 'your-api-endpoint' with the actual API endpoint\n        if (response.ok) {\n          const data = await response.json();\n          setMovies(data);\n        } else {\n          console.error('Failed to fetch movies');\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    };\n\n    fetchMovies();\n  }, []); // Empty dependency array to fetch movies only once\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleCreate = async () => {\n    try {\n      const response = await fetch('your-api-endpoint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        console.log('Movie created successfully');\n        // Refetch movies to update the list\n        const updatedMovies = await (await fetch('your-api-endpoint')).json(); // Replace 'your-api-endpoint'\n        setMovies(updatedMovies);\n      } else {\n        console.error('Failed to create movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleUpdate = async (id) => {\n    try {\n      const response = await fetch(`your-api-endpoint/${id}`, { // Replace 'your-api-endpoint'\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (response.ok) {\n        console.log('Movie updated successfully');\n        // Refetch movies to update the list\n        const updatedMovies = await (await fetch('your-api-endpoint')).json(); // Replace 'your-api-endpoint'\n        setMovies(updatedMovies);\n      } else {\n        console.error('Failed to update movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleDelete = async (id) => {\n    try {\n      const response = await fetch(`your-api-endpoint/${id}`, { // Replace 'your-api-endpoint'\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        console.log('Movie deleted successfully');\n        // Refetch movies to update the list\n        const updatedMovies = await (await fetch('your-api-endpoint')).json(); // Replace 'your-api-endpoint'\n        setMovies(updatedMovies);\n      } else {\n        console.error('Failed to delete movie');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Movie List</h2>\n      <MovieForm />\n      {loading ? (\n        <p>Loading movies...</p>\n      ) : (\n        <ul>\n          {movies.map((movie) => (\n            <li key={movie.id}>\n              <span>{movie.title}</span>\n              {/* Display other movie details */}\n              <button>Edit</button>\n              <button onClick={() => handleDelete(movie.id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default MovieCrud;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}